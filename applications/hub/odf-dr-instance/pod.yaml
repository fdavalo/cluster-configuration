apiVersion: v1
kind: Pod
metadata:
  name: config-dr-buckets
  namespace: openshift-dr-system
spec:
  serviceAccountName: default
  restartPolicy: OnFailure
  containers:
    - name: cli
      image: 'quay.io/openshift/origin-cli'
      command:
            - /bin/bash
            - '-c'
      args:
            - >-    
              export KUBECONFIG_HUB=$KUBECONFIG
              
              export primary=bm2
              
              export secondary=bm3
              
              oc get secret -n $primary | grep admin-kubeconfig | awk '{system("oc get secret "$1" -n '$primary' -o jsonpath=\"{.data.kubeconfig}\"");}'  | base64 -d > /tmp/kubeconfig-$primary
              
              oc get secret -n $secondary | grep admin-kubeconfig | awk '{system("oc get secret "$1" -n '$secondary' -o jsonpath=\"{.data.kubeconfig}\"");}'  | base64 -d > /tmp/kubeconfig-$secondary
              
              export KUBECONFIG=/tmp/kubeconfig-$primary
              
              while [[ true ]]; do oc -n openshift-dr-system get secret odrbucket; if [[ $? -eq 0 ]]; then break; fi; sleep 10; done
              
              export BUCKET_ID_P=`oc -n openshift-dr-system get secret odrbucket -o jsonpath="{.data.AWS_ACCESS_KEY_ID}" | base64 -d`
              
              export BUCKET_SECRET_P=`oc -n openshift-dr-system get secret odrbucket -o jsonpath="{.data.AWS_SECRET_ACCESS_KEY}" | base64 -d`
              
              oc create secret generic odr-s3secret-primary -n openshift-dr-system --from-literal=AWS_ACCESS_KEY_ID=$BUCKET_ID_P --from-literal=AWS_SECRET_ACCESS_KEY=$BUCKET_SECRET_P              
  
              export ROUTE_P=`oc get route s3 -n openshift-storage -o jsonpath --template="https://{.spec.host}{'\n'}"`
              
              export BUCKET_P=`oc get configmap odrbucket -n openshift-dr-system -o jsonpath='{.data.BUCKET_NAME}{"\n"}'`
                            
              oc get cm default-ingress-cert -n openshift-config-managed -o jsonpath="{['data']['ca-bundle\.crt']}" > /tmp/primary.crt
              
              export KUBECONFIG=/tmp/kubeconfig-$secondary
              
              while [[ true ]]; do oc -n openshift-dr-system get secret odrbucket; if [[ $? -eq 0 ]]; then break; fi; sleep 10; done
              
              export BUCKET_ID_S=`oc -n openshift-dr-system get secret odrbucket -o jsonpath="{.data.AWS_ACCESS_KEY_ID}" | base64 -d`
              
              export BUCKET_SECRET_S=`oc -n openshift-dr-system get secret odrbucket -o jsonpath="{.data.AWS_SECRET_ACCESS_KEY}" | base64 -d`
              
              oc create secret generic odr-s3secret-secondary -n openshift-dr-system --from-literal=AWS_ACCESS_KEY_ID=$BUCKET_ID_S --from-literal=AWS_SECRET_ACCESS_KEY=$BUCKET_SECRET_S
              
              export ROUTE_S=`oc get route s3 -n openshift-storage -o jsonpath --template="https://{.spec.host}{'\n'}"`
              
              export BUCKET_S=`oc get configmap odrbucket -n openshift-dr-system -o jsonpath='{.data.BUCKET_NAME}{"\n"}'`

              oc get cm default-ingress-cert -n openshift-config-managed -o jsonpath="{['data']['ca-bundle\.crt']}" > /tmp/secondary.crt
              
              export KUBECONFIG=$KUBECONFIG_HUB

              oc get configmap user-ca-bundle -n openshift-config -o jsonpath="{.data.ca-bundle\.crt}" > /tmp/ca-bundle.crt

              cat /tmp/primary.crt >> /tmp/ca-bundle.crt
              
              cat /tmp/secondary.crt >> /tmp/ca-bundle.crt

              echo "data:" > /tmp/cab.yaml

              echo "  ca-bundle.crt: |" >> /tmp/cab.yaml

              awk '{print "    "$0;}' /tmp/ca-bundle.crt >> /tmp/cab.yaml            
             
              oc patch configmap user-ca-bundle -n openshift-config --patch-file /tmp/cab.yaml
              
              export KUBECONFIG=/tmp/kubeconfig-$primary

              oc create secret generic odr-s3secret-secondary -n openshift-dr-system --from-literal=AWS_ACCESS_KEY_ID=$BUCKET_ID_S --from-literal=AWS_SECRET_ACCESS_KEY=$BUCKET_SECRET_S

              export KUBECONFIG=/tmp/kubeconfig-$secondary

              oc create secret generic odr-s3secret-primary -n openshift-dr-system --from-literal=AWS_ACCESS_KEY_ID=$BUCKET_ID_P --from-literal=AWS_SECRET_ACCESS_KEY=$BUCKET_SECRET_P              

              export KUBECONFIG=/tmp/kubeconfig-$primary
              
              oc get configmap ramen-dr-cluster-operator-config -n openshift-dr-system -o jsonpath="{.data.ramen_manager_config\.yaml}" > /tmp/ramenconfig.yaml

              awk 'BEGIN{show=1;} {if (show==1) print $0; if ($1=="ramenControllerType:") show=0;}' /tmp/ramenconfig.yaml > /tmp/ramenconfig.yaml.start
              
              echo "s3StoreProfiles:" > /tmp/ramenconfig.yaml.end
              
              echo "- s3ProfileName: s3-primary" >> /tmp/ramenconfig.yaml.end
              
              echo "  s3CompatibleEndpoint: $ROUTE_P" >> /tmp/ramenconfig.yaml.end
              
              echo "  s3Region: primary" >> /tmp/ramenconfig.yaml.end
              
              echo "  s3Bucket: $BUCKET_P" >> /tmp/ramenconfig.yaml.end
              
              echo "  s3SecretRef:" >> /tmp/ramenconfig.yaml.end
              
              echo "    name: odr-s3secret-primary" >> /tmp/ramenconfig.yaml.end
              
              echo "    namespace: openshift-dr-system" >> /tmp/ramenconfig.yaml.end
              
              echo "- s3ProfileName: s3-secondary" >> /tmp/ramenconfig.yaml.end
              
              echo "  s3CompatibleEndpoint: $ROUTE_S" >> /tmp/ramenconfig.yaml.end
              
              echo "  s3Region: secondary" >> /tmp/ramenconfig.yaml.end
              
              echo "  s3Bucket: $BUCKET_S" >> /tmp/ramenconfig.yaml.end
              
              echo "  s3SecretRef:" >> /tmp/ramenconfig.yaml.end
              
              echo "    name: odr-s3secret-secondary" >> /tmp/ramenconfig.yaml.end
              
              echo "    namespace: openshift-dr-system" >> /tmp/ramenconfig.yaml.end
              
              cp /tmp/ramenconfig.yaml.start /tmp/ramenconfig.yaml
              
              cat /tmp/ramenconfig.yaml.end >> /tmp/ramenconfig.yaml

              echo "data:" > /tmp/cm.yaml

              echo "  ramen_manager_config.yaml: |" >> /tmp/cm.yaml

              awk '{print "    "$0;}' /tmp/ramenconfig.yaml >> /tmp/cm.yaml
              
              oc patch configmap ramen-dr-cluster-operator-config -n openshift-dr-system --patch-file /tmp/cm.yaml

              export KUBECONFIG=/tmp/kubeconfig-$secondary
              
              oc get configmap ramen-dr-cluster-operator-config -n openshift-dr-system -o jsonpath="{.data.ramen_manager_config\.yaml}" > /tmp/ramenconfig.yaml

              awk 'BEGIN{show=1;} {if (show==1) print $0; if ($1=="ramenControllerType:") show=0;}' /tmp/ramenconfig.yaml > /tmp/ramenconfig.yaml.start
              
              cp /tmp/ramenconfig.yaml.start /tmp/ramenconfig.yaml
              
              cat /tmp/ramenconfig.yaml.end >> /tmp/ramenconfig.yaml
              
              echo "data:" > /tmp/cm.yaml

              echo "  ramen_manager_config.yaml: |" >> /tmp/cm.yaml

              awk '{print "    "$0;}' /tmp/ramenconfig.yaml >> /tmp/cm.yaml
              
              oc patch configmap ramen-dr-cluster-operator-config -n openshift-dr-system --patch-file /tmp/cm.yaml
              
              export KUBECONFIG=$KUBECONFIG_HUB

              oc create secret generic odr-s3secret-primary -n openshift-dr-system --from-literal=AWS_ACCESS_KEY_ID=$BUCKET_ID_P --from-literal=AWS_SECRET_ACCESS_KEY=$BUCKET_SECRET_P              

              oc create secret generic odr-s3secret-secondary -n openshift-dr-system --from-literal=AWS_ACCESS_KEY_ID=$BUCKET_ID_S --from-literal=AWS_SECRET_ACCESS_KEY=$BUCKET_SECRET_S

              oc get configmap ramen-hub-operator-config -n openshift-dr-system -o jsonpath="{.data.ramen_manager_config\.yaml}" > /tmp/ramenconfig.yaml

              awk 'BEGIN{show=1;} {if (show==1) print $0; if ($1=="ramenControllerType:") show=0;}' /tmp/ramenconfig.yaml > /tmp/ramenconfig.yaml.start
              
              cp /tmp/ramenconfig.yaml.start /tmp/ramenconfig.yaml
              
              cat /tmp/ramenconfig.yaml.end >> /tmp/ramenconfig.yaml
              
              echo "data:" > /tmp/cm.yaml

              echo "  ramen_manager_config.yaml: |" >> /tmp/cm.yaml

              awk '{print "    "$0;}' /tmp/ramenconfig.yaml >> /tmp/cm.yaml
              
              oc patch configmap ramen-hub-operator-config -n openshift-dr-system --patch-file /tmp/cm.yaml
